EJ1-5 y EJ1-6
1. Comprension del ejemplo: En este ejemplo el archivo ".l" lee la entrada caracter por caracter, identifica patrones como numeros, operadores aritmeticos y saltos de linea y devuelve los tokens al parser, cuando detecta un numero lo convierte a entero y lo guarda en "yylval" para que el parser lo use en los calculos. EL archivo ".y" recibe esos tokens y siguiendo las reglas gramaticales que se declararon evalua expresiones primero la multiplicacion y division, luego la suma y resta y tambien permite el valor absoluto. CUando se completa una expresion seguida de un salto de linea imprime el resultado. Entonces en conjunto el lexer se encarga de transformar el texto de entrada en tokens y el parser aplica la logica para combinarlos y obtener el resultado final de la operacion matematica

2. Ejecucion del ejemplo: Se compilan los archivos ".l" y ".y" para poder generar el ejecutable. Ejecutado correctamente.

3. Analisis de la salida: Cuando se corre el ejecutable podemos a√±adir diferentes operaciones matematicas (definidas en el parser) lo cual arroja de salida el resultado de la operacion matematica que hayamos solicitado

4. Hallazgos: En el desarrollo de este ejemplo se pudo observar que en el parser es necesario declarar la variable "yylex" ya que si no se hace arroja el error de "implicit declaration of function 'yylex' y "yyerror" ya que si no se hace arroja el error de "implicit declaration of function 'yyerror'. Tambien es necesario especificar el tipo de retorno de la variable "yyerror" que debe ser void ya que si no se hace arroja error "error: return type defaults to 'int' [-Wimplicit.int]". Tambien hubo un error al momento de correr el ejecutable y empezar a realizar operaciones ya que el resultado siempre daba 0, el problema es que en la regla "calclist" se imprimia $1, pero no era en $1 donde estaba el resultado de la expresion, sino que el valor del resultado siempre estuvo en $2 (la exp) porque esa es la que almacena el resultado de la operacion.
